const fs = require('fs');
const path = require('path');
const BorankoFormat = require('../core/borankoFormat');

/**
 * –ò–º–ø–æ—Ä—Ç–µ—Ä –∫–æ–º–∏–∫—Å–æ–≤ –ë–∞—Ä–∞–Ω—å–∫–æ –¥–ª—è freedome_sphere
 * 
 * ‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:
 * –§–æ—Ä–º–∞—Ç .comics –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤ —Ä–µ–∂–∏–º–µ ASIS –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ 
 * legacy –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è mbharata (—Å –∫–æ–º–∏–∫—Å–∞–º–∏ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ –ë–æ—Ä–∞–Ω—å–∫–æ).
 * 
 * üö® DEPRECATION NOTICE:
 * –§–æ—Ä–º–∞—Ç .comics –±—É–¥–µ—Ç —Å–∫–æ—Ä–æ –ø—Ä–∏–∑–Ω–∞–Ω DEPRECATED –∏ –£–î–ê–õ–ï–ù –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç .zelim –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
 * 
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (.comics, .cbr, .cbz)
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç .boranko –¥–ª—è 2D
 */
class BarankoComicsImporter {
    constructor() {
        this.supportedImportFormats = ['.comics', '.cbr', '.cbz']; // –¢–æ–ª—å–∫–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        this.exportFormat = '.boranko'; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ .boranko –¥–ª—è 2D
        this.importedComics = [];
        this.borankoFormat = new BorankoFormat();
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ deprecation
        this.showDeprecationWarning();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ deprecation —Ñ–æ—Ä–º–∞—Ç–∞ .comics
     */
    showDeprecationWarning() {
        console.warn(`
üö® DEPRECATION WARNING üö®
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö†Ô∏è  –§–æ—Ä–º–∞—Ç .comics –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤ —Ä–µ–∂–∏–º–µ ASIS
   –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ legacy –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è mbharata 
   (—Å –∫–æ–º–∏–∫—Å–∞–º–∏ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ –ë–æ—Ä–∞–Ω—å–∫–æ).

üö® –í–ù–ò–ú–ê–ù–ò–ï: –§–æ—Ä–º–∞—Ç .comics –±—É–¥–µ—Ç —Å–∫–æ—Ä–æ –ø—Ä–∏–∑–Ω–∞–Ω DEPRECATED 
   –∏ –£–î–ê–õ–ï–ù –∏–∑ —Å–∏—Å—Ç–µ–º—ã!

‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç .boranko 
   –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö 2D –ø—Ä–æ–µ–∫—Ç–æ–≤.

üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –°–ª–µ–¥—É—é—â–∞—è –º–∞–∂–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        `);
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –∫–æ–º–∏–∫—Å–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
     * @param {string} folderPath - –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–æ–º–∏–∫—Å–∞–º–∏
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞
     */
    async importFromFolder(folderPath) {
        try {
            console.log(`üìö –ò–º–ø–æ—Ä—Ç –∫–æ–º–∏–∫—Å–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: ${folderPath}`);
            
            const files = fs.readdirSync(folderPath);
            const comicsFiles = files.filter(file => 
                this.supportedImportFormats.some(format => file.toLowerCase().endsWith(format))
            );

            const importedComics = [];

            for (const file of comicsFiles) {
                const filePath = path.join(folderPath, file);
                const comic = await this.importComic(filePath);
                if (comic) {
                    importedComics.push(comic);
                }
            }

            this.importedComics = [...this.importedComics, ...importedComics];

            return {
                success: true,
                count: importedComics.length,
                comics: importedComics,
                message: `–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedComics.length} –∫–æ–º–∏–∫—Å–æ–≤`
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–∏–∫—Å–æ–≤:', error);
            return {
                success: false,
                error: error.message,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–æ–º–∏–∫—Å–æ–≤'
            };
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–∏–∫—Å–∞
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–º–∏–∫—Å–∞
     * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     */
    async importComic(filePath) {
        try {
            const fileName = path.basename(filePath);
            const fileExt = path.extname(filePath).toLowerCase();
            
            console.log(`üìñ –ò–º–ø–æ—Ä—Ç –∫–æ–º–∏–∫—Å–∞: ${fileName}`);

            let comicData;

            switch (fileExt) {
                case '.comics':
                    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è .comics —Ñ–∞–π–ª–æ–≤
                    console.warn(`‚ö†Ô∏è DEPRECATION WARNING: –ò–º–ø–æ—Ä—Ç —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ .comics –∏–∑ ${fileName}`);
                    console.warn(`   –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ ASIS –¥–ª—è legacy mbharata`);
                    console.warn(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç .boranko –¥–ª—è 2D`);
                    comicData = await this.parseComicsFile(filePath);
                    break;
                case '.cbr':
                case '.cbz':
                    comicData = await this.parseArchiveComic(filePath);
                    break;
                default:
                    throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${fileExt}`);
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ .boranko —Ñ–æ—Ä–º–∞—Ç
            const borankoComic = this.convertToBorankoFormat({
                id: Date.now() + Math.random(),
                name: fileName,
                originalPath: filePath,
                originalFormat: fileExt,
                imported: new Date().toISOString(),
                ...comicData
            });

            return borankoComic;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–∏–∫—Å–∞ ${filePath}:`, error);
            return null;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ .comics —Ñ–∞–π–ª–∞ (—Ñ–æ—Ä–º–∞—Ç –ë–∞—Ä–∞–Ω—å–∫–æ)
     * @param {string} filePath - –ü—É—Ç—å –∫ .comics —Ñ–∞–π–ª—É
     * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     */
    async parseComicsFile(filePath) {
        try {
            // –ß—Ç–µ–Ω–∏–µ .comics —Ñ–∞–π–ª–∞
            const fileBuffer = fs.readFileSync(filePath);
            
            // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã .comics —Ñ–∞–π–ª–∞
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ JSON –∏–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            let comicData;
            
            try {
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ JSON
                comicData = JSON.parse(fileBuffer.toString());
            } catch (jsonError) {
                // –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                comicData = {
                    pages: [],
                    metadata: {
                        title: path.basename(filePath, '.comics'),
                        author: 'Baranko',
                        format: 'comics'
                    }
                };
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫—É–ø–æ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const domeOptimized = this.optimizeForDome(comicData);

            return {
                ...comicData,
                domeOptimized,
                pages: comicData.pages || [],
                metadata: {
                    ...comicData.metadata,
                    domeCompatible: true,
                    projectionType: 'spherical'
                }
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ .comics —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∫–æ–º–∏–∫—Å–∞ (.cbr, .cbz)
     * @param {string} filePath - –ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤–Ω–æ–º—É —Ñ–∞–π–ª—É
     * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     */
    async parseArchiveComic(filePath) {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–∞–º–∏
            // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            const fileName = path.basename(filePath);
            
            return {
                pages: [],
                metadata: {
                    title: fileName,
                    author: 'Unknown',
                    format: path.extname(filePath).substring(1)
                },
                domeOptimized: false
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∫–æ–º–∏–∫—Å–∞:', error);
            throw error;
        }
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–º–∏–∫—Å–∞ –¥–ª—è –∫—É–ø–æ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {Object} comicData - –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     * @returns {Object} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    optimizeForDome(comicData) {
        return {
            sphericalMapping: true,
            fisheyeCorrection: true,
            aspectRatio: '16:9',
            resolution: {
                width: 4096,
                height: 2048
            },
            projectionSettings: {
                type: 'equirectangular',
                fov: 180,
                distortion: 0.1
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤
     * @returns {Array} –°–ø–∏—Å–æ–∫ –∫–æ–º–∏–∫—Å–æ–≤
     */
    getImportedComics() {
        return this.importedComics;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤
     */
    clearImported() {
        this.importedComics = [];
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–º–∏–∫—Å–∞ –≤ .boranko —Ñ–æ—Ä–º–∞—Ç
     * @param {Object} comic - –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     * @returns {Object} –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–∏–∫—Å –≤ .boranko —Ñ–æ—Ä–º–∞—Ç–µ
     */
    convertToBorankoFormat(comic) {
        return {
            id: comic.id,
            name: comic.name,
            type: 'comic',
            format: 'boranko',
            domeOptimized: true,
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            pages: this.convertPagesToBoranko(comic.pages || []),
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata: {
                ...comic.metadata,
                originalFormat: comic.originalFormat,
                converted: new Date().toISOString(),
                domeCompatible: true,
                projectionType: 'spherical'
            },
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display: {
                aspectRatio: '16:9',
                resolution: {
                    width: 4096,
                    height: 2048
                },
                sphericalMapping: true,
                fisheyeCorrection: true
            },
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            original: {
                path: comic.originalPath,
                format: comic.originalFormat,
                imported: comic.imported
            }
        };
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ .boranko —Ñ–æ—Ä–º–∞—Ç
     * @param {Array} pages - –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–∏–∫—Å–∞
     * @returns {Array} –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    convertPagesToBoranko(pages) {
        return pages.map((page, index) => ({
            id: page.id || `page_${index}`,
            index: index,
            type: 'comic_page',
            format: 'boranko',
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image: {
                data: page.imageData || null,
                format: 'webp',
                resolution: {
                    width: 2048,
                    height: 1024
                },
                domeOptimized: true
            },
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            metadata: {
                ...page.metadata,
                converted: new Date().toISOString(),
                originalFormat: page.originalFormat || 'unknown'
            }
        }));
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∏–∫—Å–∞ –≤ .boranko —Ñ–æ—Ä–º–∞—Ç–µ
     * @param {Object} comic - –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     * @param {string} outputPath - –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    async saveAsBoranko(comic, outputPath) {
        try {
            const borankoComic = this.convertToBorankoFormat(comic);
            const borankoData = this.borankoFormat.createBorankoStructure({
                name: comic.name,
                comics: [borankoComic]
            });
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const updatedData = this.borankoFormat.updateStatistics(borankoData);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            fs.writeFileSync(outputPath, JSON.stringify(updatedData, null, 2));
            
            return {
                success: true,
                path: outputPath,
                format: 'boranko',
                message: '–ö–æ–º–∏–∫—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ .boranko'
            };
            
        } catch (error) {
            return {
                success: false,
                error: error.message,
                message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ .boranko'
            };
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∏–∫—Å–∞ –∏–∑ .boranko —Ñ–æ—Ä–º–∞—Ç–∞
     * @param {string} filePath - –ü—É—Ç—å –∫ .boranko —Ñ–∞–π–ª—É
     * @returns {Promise<Object>} –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–º–∏–∫—Å
     */
    async loadFromBoranko(filePath) {
        try {
            const fileContent = fs.readFileSync(filePath, 'utf8');
            const borankoData = JSON.parse(fileContent);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            const validation = this.borankoFormat.validateBorankoFile(borankoData);
            if (!validation.valid) {
                throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç .boranko: ${validation.errors.join(', ')}`);
            }
            
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∏–∫—Å–æ–≤
            const comics = borankoData.content.comics || [];
            
            return {
                success: true,
                comics: comics,
                metadata: borankoData.project,
                message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${comics.length} –∫–æ–º–∏–∫—Å–æ–≤ –∏–∑ .boranko —Ñ–∞–π–ª–∞`
            };
            
        } catch (error) {
            return {
                success: false,
                error: error.message,
                message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .boranko —Ñ–∞–π–ª–∞'
            };
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–∏–∫—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç mbharata_client
     * @param {Object} comic - –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞ –≤ .boranko —Ñ–æ—Ä–º–∞—Ç–µ
     * @returns {Object} –§–æ—Ä–º–∞—Ç –¥–ª—è mbharata_client
     */
    exportForMbharataClient(comic) {
        return {
            id: comic.id,
            name: comic.name,
            type: 'comic',
            format: 'mbharata_client',
            content: {
                pages: comic.pages,
                metadata: comic.metadata,
                domeSettings: comic.display
            },
            compatibility: {
                mbharata_client: '1.0.0',
                dome_systems: ['spherical', 'fisheye'],
                boranko_format: '1.0.0'
            }
        };
    }
}

module.exports = BarankoComicsImporter;
