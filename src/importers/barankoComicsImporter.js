const fs = require('fs');
const path = require('path');

/**
 * –ò–º–ø–æ—Ä—Ç–µ—Ä –∫–æ–º–∏–∫—Å–æ–≤ –ë–∞—Ä–∞–Ω—å–∫–æ –¥–ª—è freedome_sphere
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç .comics –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å mbharata_client
 */
class BarankoComicsImporter {
    constructor() {
        this.supportedFormats = ['.comics', '.cbr', '.cbz'];
        this.importedComics = [];
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –∫–æ–º–∏–∫—Å–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
     * @param {string} folderPath - –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–æ–º–∏–∫—Å–∞–º–∏
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞
     */
    async importFromFolder(folderPath) {
        try {
            console.log(`üìö –ò–º–ø–æ—Ä—Ç –∫–æ–º–∏–∫—Å–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: ${folderPath}`);
            
            const files = fs.readdirSync(folderPath);
            const comicsFiles = files.filter(file => 
                this.supportedFormats.some(format => file.toLowerCase().endsWith(format))
            );

            const importedComics = [];

            for (const file of comicsFiles) {
                const filePath = path.join(folderPath, file);
                const comic = await this.importComic(filePath);
                if (comic) {
                    importedComics.push(comic);
                }
            }

            this.importedComics = [...this.importedComics, ...importedComics];

            return {
                success: true,
                count: importedComics.length,
                comics: importedComics,
                message: `–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedComics.length} –∫–æ–º–∏–∫—Å–æ–≤`
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–∏–∫—Å–æ–≤:', error);
            return {
                success: false,
                error: error.message,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–æ–º–∏–∫—Å–æ–≤'
            };
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–∏–∫—Å–∞
     * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–º–∏–∫—Å–∞
     * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     */
    async importComic(filePath) {
        try {
            const fileName = path.basename(filePath);
            const fileExt = path.extname(filePath).toLowerCase();
            
            console.log(`üìñ –ò–º–ø–æ—Ä—Ç –∫–æ–º–∏–∫—Å–∞: ${fileName}`);

            let comicData;

            switch (fileExt) {
                case '.comics':
                    comicData = await this.parseComicsFile(filePath);
                    break;
                case '.cbr':
                case '.cbz':
                    comicData = await this.parseArchiveComic(filePath);
                    break;
                default:
                    throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${fileExt}`);
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è freedome_sphere
            const enhancedComic = {
                id: Date.now() + Math.random(),
                name: fileName,
                originalPath: filePath,
                type: 'comic',
                format: fileExt,
                imported: new Date().toISOString(),
                domeOptimized: false,
                ...comicData
            };

            return enhancedComic;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–∏–∫—Å–∞ ${filePath}:`, error);
            return null;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ .comics —Ñ–∞–π–ª–∞ (—Ñ–æ—Ä–º–∞—Ç –ë–∞—Ä–∞–Ω—å–∫–æ)
     * @param {string} filePath - –ü—É—Ç—å –∫ .comics —Ñ–∞–π–ª—É
     * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     */
    async parseComicsFile(filePath) {
        try {
            // –ß—Ç–µ–Ω–∏–µ .comics —Ñ–∞–π–ª–∞
            const fileBuffer = fs.readFileSync(filePath);
            
            // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã .comics —Ñ–∞–π–ª–∞
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ JSON –∏–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            let comicData;
            
            try {
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ JSON
                comicData = JSON.parse(fileBuffer.toString());
            } catch (jsonError) {
                // –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                comicData = {
                    pages: [],
                    metadata: {
                        title: path.basename(filePath, '.comics'),
                        author: 'Baranko',
                        format: 'comics'
                    }
                };
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫—É–ø–æ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const domeOptimized = this.optimizeForDome(comicData);

            return {
                ...comicData,
                domeOptimized,
                pages: comicData.pages || [],
                metadata: {
                    ...comicData.metadata,
                    domeCompatible: true,
                    projectionType: 'spherical'
                }
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ .comics —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∫–æ–º–∏–∫—Å–∞ (.cbr, .cbz)
     * @param {string} filePath - –ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤–Ω–æ–º—É —Ñ–∞–π–ª—É
     * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     */
    async parseArchiveComic(filePath) {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–∞–º–∏
            // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            const fileName = path.basename(filePath);
            
            return {
                pages: [],
                metadata: {
                    title: fileName,
                    author: 'Unknown',
                    format: path.extname(filePath).substring(1)
                },
                domeOptimized: false
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∫–æ–º–∏–∫—Å–∞:', error);
            throw error;
        }
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–º–∏–∫—Å–∞ –¥–ª—è –∫—É–ø–æ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {Object} comicData - –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     * @returns {Object} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    optimizeForDome(comicData) {
        return {
            sphericalMapping: true,
            fisheyeCorrection: true,
            aspectRatio: '16:9',
            resolution: {
                width: 4096,
                height: 2048
            },
            projectionSettings: {
                type: 'equirectangular',
                fov: 180,
                distortion: 0.1
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤
     * @returns {Array} –°–ø–∏—Å–æ–∫ –∫–æ–º–∏–∫—Å–æ–≤
     */
    getImportedComics() {
        return this.importedComics;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤
     */
    clearImported() {
        this.importedComics = [];
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–∏–∫—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç mbharata_client
     * @param {Object} comic - –î–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å–∞
     * @returns {Object} –§–æ—Ä–º–∞—Ç –¥–ª—è mbharata_client
     */
    exportForMbharataClient(comic) {
        return {
            id: comic.id,
            name: comic.name,
            type: 'comic',
            format: 'mbharata_client',
            content: {
                pages: comic.pages,
                metadata: comic.metadata,
                domeSettings: comic.domeOptimized
            },
            compatibility: {
                mbharata_client: '1.0.0',
                dome_systems: ['spherical', 'fisheye']
            }
        };
    }
}

module.exports = BarankoComicsImporter;
