const fs = require('fs');
const path = require('path');

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è mbharata_client
 * –°–æ–∑–¥–∞–µ—Ç –ø–∞–∫–µ—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º mbharata
 */
class MbharataClientExporter {
    constructor() {
        this.supportedFormats = ['.mbp', '.json'];
        this.exportSettings = {
            compression: 'high',
            quality: 'high',
            domeOptimization: true,
            audioOptimization: true
        };
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç mbharata_client
     * @param {Object} projectData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
     * @param {string} outputPath - –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    async exportProject(projectData, outputPath) {
        try {
            console.log(`üì± –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ mbharata_client: ${outputPath}`);

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
            const validatedProject = this.validateProjectData(projectData);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ mbharata_client
            const mbharataPackage = this.createMbharataPackage(validatedProject);
            
            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            const optimizedPackage = await this.optimizeForMobile(mbharataPackage);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
            await this.savePackage(optimizedPackage, outputPath);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const metadata = this.createMetadata(optimizedPackage, outputPath);
            
            return {
                success: true,
                path: outputPath,
                metadata: metadata,
                message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ mbharata_client'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ mbharata_client:', error);
            return {
                success: false,
                error: error.message,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞'
            };
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
     * @param {Object} projectData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
     * @returns {Object} –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    validateProjectData(projectData) {
        const required = ['name', 'domeRadius', 'projectionType'];
        
        for (const field of required) {
            if (!projectData[field]) {
                throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`);
            }
        }

        return {
            name: projectData.name || 'Untitled Project',
            domeRadius: projectData.domeRadius || 10,
            projectionType: projectData.projectionType || 'spherical',
            scenes: projectData.scenes || [],
            audio: projectData.audio || [],
            comics: projectData.comics || [],
            created: projectData.created || new Date().toISOString(),
            version: projectData.version || '1.0.0'
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ mbharata_client
     * @param {Object} projectData - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
     * @returns {Object} –ü–∞–∫–µ—Ç –¥–ª—è mbharata_client
     */
    createMbharataPackage(projectData) {
        return {
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
            packageInfo: {
                version: "1.0.0",
                type: "dome_content",
                format: "mbharata_client",
                created: new Date().toISOString(),
                author: "Freedome Sphere",
                compatibility: {
                    mbharata_client: ">=1.0.0",
                    dome_systems: ["spherical", "fisheye", "equirectangular"]
                }
            },

            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            project: {
                name: projectData.name,
                domeRadius: projectData.domeRadius,
                projectionType: projectData.projectionType,
                created: projectData.created,
                version: projectData.version
            },

            // –ö–æ–Ω—Ç–µ–Ω—Ç
            content: {
                scenes: this.processScenes(projectData.scenes),
                audio: this.processAudio(projectData.audio),
                comics: this.processComics(projectData.comics)
            },

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ø–æ–ª–∞
            domeSettings: {
                radius: projectData.domeRadius,
                projectionType: projectData.projectionType,
                resolution: {
                    width: 4096,
                    height: 2048
                },
                fov: 180,
                distortion: 0.1
            },

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
            audioSettings: {
                spatialAudio: true,
                anAntaSound: true,
                sources: projectData.audio.length,
                format: 'spatial_3d'
            }
        };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω –¥–ª—è mbharata_client
     * @param {Array} scenes - –ú–∞—Å—Å–∏–≤ —Å—Ü–µ–Ω
     * @returns {Array} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã
     */
    processScenes(scenes) {
        return scenes.map((scene, index) => ({
            id: scene.id || index,
            name: scene.name || `Scene ${index + 1}`,
            type: scene.type || '3d',
            domeOptimized: true,
            content: scene.content || {},
            metadata: {
                ...scene.metadata,
                domeCompatible: true,
                projectionType: 'spherical'
            }
        }));
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–ª—è mbharata_client
     * @param {Array} audio - –ú–∞—Å—Å–∏–≤ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     * @returns {Array} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
     */
    processAudio(audio) {
        return audio.map((audioSource, index) => ({
            id: audioSource.id || index,
            name: audioSource.name || `Audio ${index + 1}`,
            type: audioSource.type || 'ambient',
            position: audioSource.position || { x: 0, y: 0, z: 0 },
            volume: audioSource.volume || 0.8,
            spatialAudio: true,
            anAntaSound: true,
            metadata: {
                ...audioSource.metadata,
                domeCompatible: true,
                spatial3D: true
            }
        }));
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∏–∫—Å–æ–≤ –¥–ª—è mbharata_client
     * @param {Array} comics - –ú–∞—Å—Å–∏–≤ –∫–æ–º–∏–∫—Å–æ–≤
     * @returns {Array} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å—ã
     */
    processComics(comics) {
        return comics.map((comic, index) => ({
            id: comic.id || index,
            name: comic.name || `Comic ${index + 1}`,
            type: 'comic',
            domeOptimized: true,
            pages: comic.pages || [],
            metadata: {
                ...comic.metadata,
                domeCompatible: true,
                projectionType: 'spherical',
                format: 'mbharata_client'
            }
        }));
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     * @param {Object} package - –ü–∞–∫–µ—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     * @returns {Promise<Object>} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
     */
    async optimizeForMobile(package) {
        console.log('üì± –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (package.content.comics) {
            package.content.comics = await this.optimizeComics(package.content.comics);
        }

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
        if (package.content.audio) {
            package.content.audio = await this.optimizeAudio(package.content.audio);
        }

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è 3D —Å—Ü–µ–Ω
        if (package.content.scenes) {
            package.content.scenes = await this.optimizeScenes(package.content.scenes);
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        package.optimization = {
            mobileOptimized: true,
            compressionLevel: this.exportSettings.compression,
            qualityLevel: this.exportSettings.quality,
            domeOptimized: this.exportSettings.domeOptimization,
            audioOptimized: this.exportSettings.audioOptimization
        };

        return package;
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–º–∏–∫—Å–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     * @param {Array} comics - –ú–∞—Å—Å–∏–≤ –∫–æ–º–∏–∫—Å–æ–≤
     * @returns {Promise<Array>} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∏–∫—Å—ã
     */
    async optimizeComics(comics) {
        return comics.map(comic => ({
            ...comic,
            mobileOptimized: true,
            compression: 'high',
            format: 'webp',
            resolution: {
                width: 2048,
                height: 1024
            }
        }));
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     * @param {Array} audio - –ú–∞—Å—Å–∏–≤ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     * @returns {Promise<Array>} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
     */
    async optimizeAudio(audio) {
        return audio.map(audioSource => ({
            ...audioSource,
            mobileOptimized: true,
            format: 'ogg',
            bitrate: 128,
            spatialAudio: true
        }));
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è 3D —Å—Ü–µ–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     * @param {Array} scenes - –ú–∞—Å—Å–∏–≤ —Å—Ü–µ–Ω
     * @returns {Promise<Array>} –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã
     */
    async optimizeScenes(scenes) {
        return scenes.map(scene => ({
            ...scene,
            mobileOptimized: true,
            lodLevels: 3,
            textureCompression: 'high',
            polygonReduction: 0.3
        }));
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
     * @param {Object} package - –ü–∞–∫–µ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @param {string} outputPath - –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    async savePackage(package, outputPath) {
        const packageJson = JSON.stringify(package, null, 2);
        fs.writeFileSync(outputPath, packageJson);
        console.log(`‚úÖ –ü–∞–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞
     * @param {Object} package - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
     * @param {string} outputPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
     * @returns {Object} –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
     */
    createMetadata(package, outputPath) {
        const stats = fs.statSync(outputPath);
        
        return {
            filePath: outputPath,
            fileName: path.basename(outputPath),
            fileSize: stats.size,
            fileSizeFormatted: this.formatFileSize(stats.size),
            exportDate: new Date().toISOString(),
            packageVersion: package.packageInfo.version,
            contentCount: {
                scenes: package.content.scenes.length,
                audio: package.content.audio.length,
                comics: package.content.comics.length
            },
            optimization: package.optimization
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     * @param {number} bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
     * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
     */
    formatFileSize(bytes) {
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        if (bytes === 0) return '0 Bytes';
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
     * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    setExportSettings(settings) {
        this.exportSettings = { ...this.exportSettings, ...settings };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
     * @returns {Object} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    getExportSettings() {
        return this.exportSettings;
    }
}

module.exports = MbharataClientExporter;
