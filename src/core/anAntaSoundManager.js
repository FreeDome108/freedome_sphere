/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã anAntaSound –¥–ª—è freedome_sphere
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –∫—É–ø–æ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
class AnAntaSoundManager {
    constructor() {
        this.audioContext = null;
        this.audioSources = [];
        this.spatialSettings = {
            domeRadius: 10,
            listenerPosition: { x: 0, y: 0, z: 0 },
            listenerOrientation: { x: 0, y: 0, z: 1 },
            reverbSettings: {
                enabled: true,
                roomSize: 0.5,
                damping: 0.5,
                wet: 0.3
            }
        };
        this.isInitialized = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è anAntaSound —Å–∏—Å—Ç–µ–º—ã
     * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async initialize() {
        try {
            console.log('üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è anAntaSound —Å–∏—Å—Ç–µ–º—ã...');

            // –°–æ–∑–¥–∞–Ω–∏–µ Web Audio API –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
            await this.setupSpatialAudio();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏
            await this.setupReverb();
            
            this.isInitialized = true;
            console.log('‚úÖ anAntaSound —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ anAntaSound:', error);
            return false;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
     */
    async setupSpatialAudio() {
        if (!this.audioContext) return;

        // –°–æ–∑–¥–∞–Ω–∏–µ PannerNode –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        this.pannerNode = this.audioContext.createPanner();
        this.pannerNode.panningModel = 'HRTF';
        this.pannerNode.distanceModel = 'exponential';
        this.pannerNode.rolloffFactor = 1;
        this.pannerNode.coneInnerAngle = 360;
        this.pannerNode.coneOuterAngle = 0;
        this.pannerNode.coneOuterGain = 0;

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã—Ö–æ–¥—É
        this.pannerNode.connect(this.audioContext.destination);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏
     */
    async setupReverb() {
        if (!this.audioContext) return;

        // –°–æ–∑–¥–∞–Ω–∏–µ ConvolverNode –¥–ª—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏
        this.convolverNode = this.audioContext.createConvolver();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–ø—É–ª—å—Å–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –∫—É–ø–æ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        const impulseResponse = this.createDomeImpulseResponse();
        this.convolverNode.buffer = impulseResponse;
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã—Ö–æ–¥—É
        this.convolverNode.connect(this.audioContext.destination);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–ø—É–ª—å—Å–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –∫—É–ø–æ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
     * @returns {AudioBuffer} –ò–º–ø—É–ª—å—Å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
     */
    createDomeImpulseResponse() {
        const sampleRate = this.audioContext.sampleRate;
        const length = sampleRate * 2; // 2 —Å–µ–∫—É–Ω–¥—ã
        const impulse = this.audioContext.createBuffer(2, length, sampleRate);
        
        const leftChannel = impulse.getChannelData(0);
        const rightChannel = impulse.getChannelData(1);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–ª—å–Ω–æ–≥–æ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        for (let i = 0; i < length; i++) {
            const decay = Math.exp(-i / (sampleRate * 0.5));
            const noise = (Math.random() * 2 - 1) * 0.1;
            
            leftChannel[i] = noise * decay;
            rightChannel[i] = noise * decay * 0.8; // –ù–µ–±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
        }
        
        return impulse;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @param {Object} audioSource - –î–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
     */
    async addAudioSource(audioSource) {
        try {
            if (!this.isInitialized) {
                await this.initialize();
            }

            console.log(`üéµ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${audioSource.name}`);

            const source = {
                id: audioSource.id || Date.now() + Math.random(),
                name: audioSource.name,
                type: audioSource.type || 'ambient',
                position: audioSource.position || { x: 0, y: 0, z: 0 },
                volume: audioSource.volume || 0.8,
                loop: audioSource.loop || false,
                audioBuffer: null,
                sourceNode: null,
                pannerNode: null,
                gainNode: null,
                isPlaying: false
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            if (audioSource.file) {
                source.audioBuffer = await this.loadAudioFile(audioSource.file);
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —É–∑–ª–æ–≤
            source.gainNode = this.audioContext.createGain();
            source.pannerNode = this.audioContext.createPanner();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            this.setSourcePosition(source, source.position);
            this.setSourceVolume(source, source.volume);

            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∑–ª–æ–≤
            source.gainNode.connect(source.pannerNode);
            source.pannerNode.connect(this.convolverNode);

            this.audioSources.push(source);
            
            console.log(`‚úÖ –ê—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ${source.name}`);
            return source;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
     * @param {string} filePath - –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
     * @returns {Promise<AudioBuffer>} –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä
     */
    async loadAudioFile(filePath) {
        try {
            const response = await fetch(filePath);
            const arrayBuffer = await response.arrayBuffer();
            return await this.audioContext.decodeAudioData(arrayBuffer);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @param {Object} source - –ê—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è {x, y, z}
     */
    setSourcePosition(source, position) {
        if (source.pannerNode) {
            source.pannerNode.positionX.value = position.x;
            source.pannerNode.positionY.value = position.y;
            source.pannerNode.positionZ.value = position.z;
            source.position = position;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @param {Object} source - –ê—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫
     * @param {number} volume - –ì—Ä–æ–º–∫–æ—Å—Ç—å (0-1)
     */
    setSourceVolume(source, volume) {
        if (source.gainNode) {
            source.gainNode.gain.value = volume;
            source.volume = volume;
        }
    }

    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @param {string} sourceId - ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
     */
    async playSource(sourceId) {
        try {
            const source = this.audioSources.find(s => s.id === sourceId);
            if (!source || !source.audioBuffer) {
                throw new Error('–ê—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }

            if (source.isPlaying) {
                this.stopSource(sourceId);
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source.sourceNode = this.audioContext.createBufferSource();
            source.sourceNode.buffer = source.audioBuffer;
            source.sourceNode.loop = source.loop;
            
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gain node
            source.sourceNode.connect(source.gainNode);
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            source.sourceNode.start();
            source.isPlaying = true;

            console.log(`‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: ${source.name}`);
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
            return false;
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @param {string} sourceId - ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    stopSource(sourceId) {
        const source = this.audioSources.find(s => s.id === sourceId);
        if (source && source.sourceNode && source.isPlaying) {
            source.sourceNode.stop();
            source.sourceNode.disconnect();
            source.sourceNode = null;
            source.isPlaying = false;
            console.log(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ${source.name}`);
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    stopAllSources() {
        this.audioSources.forEach(source => {
            this.stopSource(source.id);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–ª—É—à–∞—Ç–µ–ª—è
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è {x, y, z}
     * @param {Object} orientation - –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è {x, y, z}
     */
    updateListener(position, orientation) {
        if (this.audioContext && this.audioContext.listener) {
            this.audioContext.listener.positionX.value = position.x;
            this.audioContext.listener.positionY.value = position.y;
            this.audioContext.listener.positionZ.value = position.z;
            
            this.audioContext.listener.forwardX.value = orientation.x;
            this.audioContext.listener.forwardY.value = orientation.y;
            this.audioContext.listener.forwardZ.value = orientation.z;
            
            this.spatialSettings.listenerPosition = position;
            this.spatialSettings.listenerOrientation = orientation;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ø–æ–ª–∞
     * @param {Object} domeSettings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ø–æ–ª–∞
     */
    updateDomeSettings(domeSettings) {
        this.spatialSettings.domeRadius = domeSettings.radius || 10;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫—É–ø–æ–ª–∞
        if (domeSettings.radius !== this.spatialSettings.domeRadius) {
            this.setupReverb();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     * @returns {Array} –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    getAudioSources() {
        return this.audioSources;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @param {string} sourceId - ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    removeAudioSource(sourceId) {
        const index = this.audioSources.findIndex(s => s.id === sourceId);
        if (index !== -1) {
            this.stopSource(sourceId);
            this.audioSources.splice(index, 1);
            console.log(`üóëÔ∏è –ê—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª–µ–Ω: ${sourceId}`);
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ anAntaSound –¥–ª—è mbharata_client
     * @returns {Object} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    exportSettings() {
        return {
            spatialSettings: this.spatialSettings,
            audioSources: this.audioSources.map(source => ({
                id: source.id,
                name: source.name,
                type: source.type,
                position: source.position,
                volume: source.volume,
                loop: source.loop
            })),
            domeSettings: {
                radius: this.spatialSettings.domeRadius,
                reverb: this.spatialSettings.reverbSettings
            }
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        this.stopAllSources();
        this.audioSources = [];
        
        if (this.audioContext) {
            this.audioContext.close();
            this.audioContext = null;
        }
        
        this.isInitialized = false;
        console.log('üßπ anAntaSound —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
    }
}

module.exports = AnAntaSoundManager;
