import 'dart:async';
import 'package:flutter/foundation.dart';
import 'freedome_api_stubs.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π FreeDome
class FreedomeIntegrationService extends ChangeNotifier {
  FreedomeCore? _freedomeCore;
  FreedomeCalibration? _freedomeCalibration;
  FreedomeConnectivity? _freedomeConnectivity;

  bool _isInitialized = false;
  bool _isConnected = false;
  ConnectionStatus _connectionStatus = ConnectionStatus.disconnected;

  // Getters
  bool get isInitialized => _isInitialized;
  bool get isConnected => _isConnected;
  ConnectionStatus get connectionStatus => _connectionStatus;
  FreedomeCore? get freedomeCore => _freedomeCore;
  FreedomeCalibration? get freedomeCalibration => _freedomeCalibration;
  FreedomeConnectivity? get freedomeConnectivity => _freedomeConnectivity;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ FreeDome
  Future<void> initialize() async {
    try {
      print('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FreeDome –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —è–¥—Ä–∞
      _freedomeCore = FreedomeCore();
      await _freedomeCore!.initialize();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
      _freedomeCalibration = FreedomeCalibration();
      await _freedomeCalibration!.initialize();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      _freedomeConnectivity = FreedomeConnectivity();
      await _freedomeConnectivity!.initialize();

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        _freedomeConnectivity!.onConnectionStatusChanged.listen(
          (status) => _onConnectionStatusChanged(status),
        );

      _isInitialized = true;
      notifyListeners();

      print('‚úÖ FreeDome –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FreeDome: $e');
      rethrow;
    }
  }

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ FreeDome
  Future<bool> connect({
    String? serverUrl,
    int? port,
    Map<String, dynamic>? connectionOptions,
  }) async {
    if (!_isInitialized) {
      throw Exception(
        'FreeDome –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.',
      );
    }

    try {
      print('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeDome —Å–∏—Å—Ç–µ–º–µ...');

      final result = await _freedomeConnectivity!.connect(
        serverUrl: serverUrl ?? 'localhost',
        port: port ?? 8080,
        options: connectionOptions ?? {},
      );

      _isConnected = result;
      notifyListeners();

      if (_isConnected) {
        print('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeDome —Å–∏—Å—Ç–µ–º–µ');
      } else {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FreeDome —Å–∏—Å—Ç–µ–º–µ');
      }

      return _isConnected;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      return false;
    }
  }

  /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã FreeDome
  Future<void> disconnect() async {
    if (_freedomeConnectivity != null) {
      await _freedomeConnectivity!.disconnect();
      _isConnected = false;
      _connectionStatus = ConnectionStatus.disconnected;
      notifyListeners();
      print('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç FreeDome —Å–∏—Å—Ç–µ–º—ã');
    }
  }

  /// –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã
  Future<CalibrationResult> calibrateAudio({
    List<String>? audioDevices,
    Map<String, dynamic>? calibrationOptions,
  }) async {
    if (!_isInitialized || _freedomeCalibration == null) {
      throw Exception('FreeDome –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    try {
      print('üéµ –ù–∞—á–∞–ª–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã...');

      final result = await _freedomeCalibration!.calibrateAudio(
        devices: audioDevices,
        options: calibrationOptions ?? {},
      );

      print('‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.status}');
      return result;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ: $e');
      rethrow;
    }
  }

  /// –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤–∏–¥–µ–æ —Å–∏—Å—Ç–µ–º—ã
  Future<CalibrationResult> calibrateVideo({
    Map<String, dynamic>? videoSettings,
    Map<String, dynamic>? calibrationOptions,
  }) async {
    if (!_isInitialized || _freedomeCalibration == null) {
      throw Exception('FreeDome –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    try {
      print('üìπ –ù–∞—á–∞–ª–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤–∏–¥–µ–æ —Å–∏—Å—Ç–µ–º—ã...');

      final result = await _freedomeCalibration!.calibrateVideo(
        settings: videoSettings ?? {},
        options: calibrationOptions ?? {},
      );

      print('‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.status}');
      return result;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤–∏–¥–µ–æ: $e');
      rethrow;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ FreeDome —Å–∏—Å—Ç–µ–º—É
  Future<void> sendData(Map<String, dynamic> data) async {
    if (!_isConnected || _freedomeCore == null) {
      throw Exception('FreeDome –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      await _freedomeCore!.sendData(data);
      print('üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ FreeDome —Å–∏—Å—Ç–µ–º—É');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
  Future<SystemStatus> getSystemStatus() async {
    if (!_isInitialized || _freedomeCore == null) {
      throw Exception('FreeDome –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      return await _freedomeCore!.getSystemStatus();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: $e');
      rethrow;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  void _onConnectionStatusChanged(ConnectionStatus status) {
    _connectionStatus = status;
    _isConnected = status == ConnectionStatus.connected;
    notifyListeners();

    switch (status) {
      case ConnectionStatus.connected:
        print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ FreeDome —Å–∏—Å—Ç–µ–º–µ');
        break;
      case ConnectionStatus.connecting:
        print('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FreeDome —Å–∏—Å—Ç–µ–º–µ...');
        break;
      case ConnectionStatus.disconnected:
        print('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç FreeDome —Å–∏—Å—Ç–µ–º—ã');
        break;
      case ConnectionStatus.error:
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FreeDome —Å–∏—Å—Ç–µ–º–µ');
        break;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
  Future<List<DeviceInfo>> getAvailableDevices() async {
    if (!_isInitialized || _freedomeCalibration == null) {
      throw Exception('FreeDome –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    try {
      return await _freedomeCalibration!.getAvailableDevices();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e');
      rethrow;
    }
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  @override
  void dispose() {
    disconnect();
    super.dispose();
  }
}

